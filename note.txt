                  parseInt
parseInt("42");         // Returns 42
parseInt("101", 2);     // Returns 5 (binary to decimal)
parseInt("0x1F", 16);   // Returns 31 (hexadecimal to decimal)
parseInt("7.5");        // Returns 7 (parses only the integer part)
parseInt("abc");        // Returns NaN (not a number)
parseInt("  15");       // Returns 15 (leading spaces are ignored)


parseInt("08");         // Returns 8 (in modern browsers, as radix defaults to 10)
parseInt("08", 8);      // Returns NaN (invalid octal in radix 8)


                find and findIndex 

1. find
Purpose: Returns the first element in an array that satisfies the provided testing function.
Return Value: The element itself (or undefined if no match is found).
Usage Example:
const numbers = [10, 20, 30, 40];
const result = numbers.find(num => num > 25);
console.log(result); // Output: 30

2. findIndex
Purpose: Returns the index of the first element in an array that satisfies the provided testing function.
Return Value: The index (or -1 if no match is found).
Usage Example:
const numbers = [10, 20, 30, 40];
const index = numbers.findIndex(num => num > 25);
console.log(index); // Output: 2

Key Differences:
 Feature	              find	                                              findIndex
Return Type	       The element found	                              The index of the element
No Match	       Returns undefined	                              Returns -1
Use Case	       When you need the element itself	              When you need the index of the element


Example Combining Both:
If you need both the element and its index, you can combine them:

const numbers = [10, 20, 30, 40];

const result = numbers.find(num => num > 25);
const index = numbers.findIndex(num => num > 25);

console.log(`Element: ${result}, Index: ${index}`);
// Output: Element: 30, Index: 2


/////////////////////////////////////////////////////////////////////////////////////////////////

                       slice and splice


In JavaScript, slice and splice are both used to work with arrays, but they serve different purposes and behave differently.

1. slice
Purpose: Extracts a portion of an array without modifying the original array.
Return Value: A new array containing the extracted elements.
Syntax:  array.slice(startIndex, endIndex);
startIndex: The index where the extraction starts (inclusive).
endIndex: The index where the extraction ends (exclusive). If omitted, it extracts until the end of the array.
Example:

const arr = [1, 2, 3, 4, 5];

// Extract elements from index 1 to 3 (3 is exclusive)
const slicedArr = arr.slice(1, 3);

console.log(slicedArr); // Output: [2, 3]
console.log(arr);       // Original array is unchanged: [1, 2, 3, 4, 5]



2. splice
Purpose: Changes an array by adding, removing, or replacing elements.
Return Value: An array containing the removed elements.
Syntax:
array.splice(startIndex, deleteCount, ...itemsToAdd);
startIndex: The index where changes will begin.
deleteCount: The number of elements to remove. If 0, no elements are removed.
...itemsToAdd: Optional elements to add at the specified index.
Example (Removing Elements):
const arr = [1, 2, 3, 4, 5];

// Remove 2 elements starting from index 1
const removed = arr.splice(1, 2);

console.log(removed); // Output: [2, 3]
console.log(arr);     // Modified array: [1, 4, 5]
Example (Adding Elements):
const arr = [1, 4, 5];

// Add elements at index 1
arr.splice(1, 0, 2, 3);

console.log(arr); // Output: [1, 2, 3, 4, 5]
Example (Replacing Elements):
const arr = [1, 2, 3, 4, 5];

// Replace 2 elements starting from index 1
arr.splice(1, 2, 9, 8);

console.log(arr); // Output: [1, 9, 8, 4, 5]

Key Differences:
  Feature	               slice	                                      splice
Modifies Array	   No (original array is unchanged)	        Yes (original array is modified)
Return Value	   A new array with extracted elements	    An array of removed elements
Use Case	       Extract a portion of an array	        Add, remove, or replace elements

When to Use:
Use slice when you need a copy or subset of an array without altering the original array.
Use splice when you need to modify the original array by adding, removing, or replacing elements.


/////////////////////////////////////////////////////////////////////////////////////////////////////
                            MORGAN AND WISTON

1. Morgan
Morgan is a middleware specifically designed for logging HTTP requests in a Node.js application. It's often used in conjunction with Express.js to log details about incoming requests.                            

const express = require('express');
const morgan = require('morgan');

const app = express();

// Use Morgan middleware to log HTTP requests
app.use(morgan('dev')); // 'dev' is a predefined format

app.get('/', (req, res) => {
  res.send('Hello, World!');
});

app.listen(3000, () => {
  console.log('Server is running on port 3000');
});


Morgan Formats
dev: Concise colored output (status, method, response time, etc.).
combined: Standard Apache combined log format.
common: Standard Apache common log format.
short: Shortened version of the log.
tiny: Minimalistic logging.


2. Winston
Winston is a general-purpose logging library used for logging application-level information. It supports multiple transports (e.g., console, file, HTTP, etc.) and can be customized for different log levels.

const winston = require('winston');

// Create a Winston logger
const logger = winston.createLogger({
  level: 'info',
  format: winston.format.json(),
  transports: [
    new winston.transports.Console(), // Log to console
    new winston.transports.File({ filename: 'app.log' }) // Log to a file
  ],
});

// Example log messages
logger.info('This is an info message');
logger.error('This is an error message');


Combining Morgan and Winston
Morgan can be integrated with Winston to log HTTP requests in the same logging system.

const express = require('express');
const morgan = require('morgan');
const winston = require('winston');

const app = express();

// Create Winston logger
const logger = winston.createLogger({
  level: 'info',
  format: winston.format.json(),
  transports: [
    new winston.transports.Console(),
    new winston.transports.File({ filename: 'app.log' }),
  ],
});

// Stream logs from Morgan to Winston
app.use(
  morgan('combined', {
    stream: {
      write: (message) => logger.info(message.trim()),
    },
  })
);

app.get('/', (req, res) => {
  res.send('Hello, World!');
});

app.listen(3000, () => {
  logger.info('Server is running on port 3000');
});


Morgan and Winston are two popular logging libraries in Node.js. While they are distinct libraries, they are often used together in Node.js applications for effective logging of requests and system information.

1. Morgan
Morgan is a middleware specifically designed for logging HTTP requests in a Node.js application. It's often used in conjunction with Express.js to log details about incoming requests.

Installation
bash
Copy code
npm install morgan
Usage
javascript
Copy code
const express = require('express');
const morgan = require('morgan');

const app = express();

// Use Morgan middleware to log HTTP requests
app.use(morgan('dev')); // 'dev' is a predefined format

app.get('/', (req, res) => {
  res.send('Hello, World!');
});

app.listen(3000, () => {
  console.log('Server is running on port 3000');
});
Morgan Formats
dev: Concise colored output (status, method, response time, etc.).
combined: Standard Apache combined log format.
common: Standard Apache common log format.
short: Shortened version of the log.
tiny: Minimalistic logging.
2. Winston
Winston is a general-purpose logging library used for logging application-level information. It supports multiple transports (e.g., console, file, HTTP, etc.) and can be customized for different log levels.

Installation
bash
Copy code
npm install winston
Usage
javascript
Copy code
const winston = require('winston');

// Create a Winston logger
const logger = winston.createLogger({
  level: 'info',
  format: winston.format.json(),
  transports: [
    new winston.transports.Console(), // Log to console
    new winston.transports.File({ filename: 'app.log' }) // Log to a file
  ],
});

// Example log messages
logger.info('This is an info message');
logger.error('This is an error message');
Combining Morgan and Winston
Morgan can be integrated with Winston to log HTTP requests in the same logging system.

javascript
Copy code
const express = require('express');
const morgan = require('morgan');
const winston = require('winston');

const app = express();

// Create Winston logger
const logger = winston.createLogger({
  level: 'info',
  format: winston.format.json(),
  transports: [
    new winston.transports.Console(),
    new winston.transports.File({ filename: 'app.log' }),
  ],
});

// Stream logs from Morgan to Winston
app.use(
  morgan('combined', {
    stream: {
      write: (message) => logger.info(message.trim()),
    },
  })
);

app.get('/', (req, res) => {
  res.send('Hello, World!');
});

app.listen(3000, () => {
  logger.info('Server is running on port 3000');
});

When to Use Them
Morgan: For logging HTTP request details in your Express.js application.
Winston: For logging other application events, errors, and custom messages.
Using them together ensures comprehensive and organized logging for your Node.js application.

////////////////////////////////////////////////////////////////////////

   split

In JavaScript, the split() method is used to divide a string into an array of substrings based on a specified separator. It is a method available on string objects.
string.split(separator, limit)

separator (optional): Specifies the pattern (string or regular expression) used to determine where to split the string.
If omitted, the entire string is returned as a single-element array.
If the separator is an empty string (""), the string is split into individual characters.

limit (optional): Specifies the maximum number of splits. The resulting array will have at most limit elements.


Examples
const str = "apple,banana,cherry";
const result = str.split(","); // Split by commas
console.log(result); 
// Output: ["apple", "banana", "cherry"]


Using Limit
const str = "apple,banana,cherry";
const result = str.split(",", 2); // Split by commas, limit to 2 parts
console.log(result);
// Output: ["apple", "banana"]

Splitting by Space
const str = "Hello World! How are you?";
const result = str.split(" "); // Split by spaces
console.log(result);
// Output: ["Hello", "World!", "How", "are", "you?"]

Splitting into Characters
const str = "hello";
const result = str.split(""); // Split into characters
console.log(result);
// Output: ["h", "e", "l", "l", "o"]

Using Regular Expressions
const str = "one, two; three.four";
const result = str.split(/[,;. ]+/); // Split by commas, semicolons, periods, or spaces
console.log(result);
// Output: ["one", "two", "three", "four"]


No Separator
If the separator is omitted, the method returns the entire string as a single-element array:

const str = "hello";
const result = str.split();
console.log(result);
// Output: ["hello"]

Edge Cases

Empty String as Input
const str = "";
const result = str.split(",");
console.log(result);
// Output: [""]

Separator Not Found
const str = "apple banana cherry";
const result = str.split(",");
console.log(result);
// Output: ["apple banana cherry"]

Empty String as Separator
const str = "hello";
const result = str.split("");
console.log(result);
// Output: ["h", "e", "l", "l", "o"]

Common Use Cases
Tokenizing strings (e.g., splitting a sentence into words).
Parsing CSV or other delimited data.
Breaking strings for character-by-character processing.
